// Code generated by go-bindata. DO NOT EDIT.
// sources:
// jcli/zh_CN/LC_MESSAGES/jcli.mo (731B)
// jcli/zh_CN/LC_MESSAGES/jcli.po (1.109kB)

package i18n

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jcliZh_cnLc_messagesJcliMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\x4d\x6b\x13\x4f\x18\xff\x35\xff\xfe\x11\xf6\x28\x78\x10\x14\x1e\x11\x7c\x41\xa6\xdd\x8d\x3d\xd4\x2d\x15\xb4\x2f\x12\x4d\x34\x94\x28\xde\x64\xdc\x4c\x77\xa7\x4e\x66\xc2\xce\xc4\x5a\x4f\x1e\x5a\x6d\x05\xc1\x4b\x51\x82\x07\x0b\x7a\x50\xa1\x7a\x6b\x15\xfa\x15\xfc\x08\x9e\xba\x89\xfd\x16\x92\x6c\x9a\x7a\xf0\x81\x19\x66\x9e\xe7\xf7\x32\xcc\xef\xd7\xf1\xd1\x4d\x00\xf8\x1f\xc0\x29\x00\xb3\x00\x8e\x01\x50\xc8\x6b\x1d\xc0\x39\x00\x1b\x00\x4e\x03\xf8\x06\xe0\x24\x80\x9f\x00\xae\x02\xf8\x0d\xe0\xec\x08\x70\xbe\xb7\x00\xdc\x2a\x00\x67\x00\xd8\x02\x70\x02\xc0\x66\x01\x18\x07\xf0\xa5\x00\x8c\x00\xf8\x0f\x40\x61\xa0\x3d\x3a\xf0\xed\xd7\x4d\xa1\x1f\x49\x6d\x69\xa6\x5c\xa2\x0b\x4b\x91\x92\x17\xa9\xc1\x35\x8f\x05\xad\x98\x56\x4a\x83\x31\xca\xd2\x3a\xe2\x4a\x1d\x36\x28\x32\x7a\x51\xc6\x24\x9d\x68\x58\x54\x72\x86\x4b\xc4\x61\xdf\x2c\x52\x4f\x0c\xbd\x8d\xa4\x25\x4e\xce\x18\x45\xcb\x89\x8c\x12\x8a\x4c\x4b\xd5\x29\x11\xaa\xd9\x33\xa1\x65\xe9\x92\xdc\xad\xd1\x52\x4e\x36\x95\x18\xda\x56\x53\xb3\x24\x22\xc7\x4a\x75\x76\x4f\xa4\x56\x1a\x1d\x92\xb7\x20\x9a\x26\x75\xac\x62\x63\x59\x67\xd7\x5b\xb1\x65\x35\x13\xd2\x5c\xe5\x5a\xa9\xec\x55\xef\xb0\x05\xf1\x58\xf6\x90\x6c\x96\x3b\x11\x52\xd1\x0f\xae\xb0\x20\x60\xc5\x80\x82\xcb\xa1\x3f\x71\xc9\x9f\xf4\x7d\xaf\xcc\x75\xdc\xe2\xb1\x60\x35\xc1\x1b\x21\x79\x95\x52\x65\xee\xc8\x22\x18\xf3\xbd\x19\xa3\x9d\xd0\x8e\xd5\x56\x9a\x22\x24\x27\x9e\xb8\xf1\xa6\xe2\x52\x4f\x51\x94\xf0\xd4\x0a\x37\x7d\xb7\x36\xcf\x26\x8f\x70\x29\xd7\x76\x51\xa4\x6c\x4e\x47\xa6\x2e\x75\x1c\xd2\xe4\x43\xe9\xbc\xfb\xec\x86\xd0\x22\xe5\xce\xa4\x21\x55\x8d\xa8\x4b\x47\xc5\xb1\xe2\xd8\x84\x57\xe6\x76\x40\x53\xf9\xd4\xab\xaa\x56\xca\x15\x9b\x37\x69\xc3\x86\xa4\x9b\xfd\xab\x9d\x0e\xa6\x28\x3f\x4e\xfb\x53\xc3\x97\x87\xf4\x34\x79\x30\x73\xdb\xfb\x57\x82\xdd\xed\xad\xee\xeb\xe7\xfb\x7b\xef\xbb\xed\xd5\xe1\x5f\x66\xeb\x6f\xb2\x17\x3f\x3a\x1b\xcf\x3a\xef\x36\xfe\xea\xd3\xc1\xda\xab\xee\xde\xf6\xc1\xd6\x77\xe4\xb4\x7e\x70\xd4\x6d\xaf\xe6\x83\x3c\xc2\xce\xdb\xaf\xd9\xee\x76\xf6\xf2\x53\x4f\xb4\x0f\xcb\x3e\xb4\xf7\x77\x3f\x0f\x55\xba\xed\xd5\x6c\xe7\x63\xb6\xb6\x83\x3f\x01\x00\x00\xff\xff\x55\x7f\xa9\x3f\xdb\x02\x00\x00")

func jcliZh_cnLc_messagesJcliMoBytes() ([]byte, error) {
	return bindataRead(
		_jcliZh_cnLc_messagesJcliMo,
		"jcli/zh_CN/LC_MESSAGES/jcli.mo",
	)
}

func jcliZh_cnLc_messagesJcliMo() (*asset, error) {
	bytes, err := jcliZh_cnLc_messagesJcliMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jcli/zh_CN/LC_MESSAGES/jcli.mo", size: 731, mode: os.FileMode(0644), modTime: time.Unix(1574312686, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9a, 0x68, 0x9a, 0xe9, 0xf2, 0x41, 0xe6, 0x3e, 0x54, 0x76, 0x2f, 0xbf, 0x8, 0x82, 0xeb, 0xf3, 0x11, 0x9c, 0x9, 0x9a, 0x34, 0x94, 0x21, 0xe4, 0x81, 0x3e, 0x62, 0xbe, 0x37, 0xd2, 0x28, 0xf9}}
	return a, nil
}

var _jcliZh_cnLc_messagesJcliPo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x4f\xdb\x48\x14\xc7\xef\xf9\x14\x4f\xc9\x61\x41\xbb\x13\xec\x00\x5a\x30\xcb\x6a\xb3\x8e\x21\xde\x4d\x36\x91\x63\xd0\x22\x55\x42\x83\x3d\xb1\x07\xec\x19\x6b\x66\x5c\x4a\x4f\x3d\x40\x5b\x2a\x55\xea\xad\x55\xd4\x43\x91\xda\x43\x7b\xa0\x47\x68\x25\xbe\x0d\x21\xe2\x5b\x54\xb6\x13\x22\xd4\x70\x7b\x7e\xf3\x7f\xff\xff\x6f\xe6\xb9\x02\xbd\x4e\xdb\x82\x86\xd5\x33\x1d\xbb\xeb\xda\xdb\x16\xb8\xb6\xdb\xb2\xaa\xa5\x0a\x98\x3c\x39\x12\x34\x08\x15\xcc\x99\xf3\xb0\x63\xd5\x1d\x70\x9b\x16\x74\xeb\xe6\xbf\xf5\x4d\xeb\x97\x1e\x98\x9d\xee\x8e\x63\x6f\x36\x5d\x68\x76\x5a\x0d\xcb\x29\x55\xc0\x0d\xa9\x84\x3e\x8d\x08\x50\x09\x3e\x95\x4a\xd0\xbd\x54\x11\x1f\x52\xe6\x13\x01\x2a\x24\x20\x71\x4c\x20\xa2\x1e\x61\x92\x00\x96\x79\x6f\xec\x09\x09\xf6\x0e\x70\x40\xb2\xf4\x0d\xdb\xe9\xb9\x50\xdf\x72\x9b\x1d\x07\xfe\xb0\xda\x75\xbb\xf5\x57\xbd\xd1\x70\xac\x5e\xef\xcf\xdf\x72\x9a\x6a\xa9\x52\x8a\x65\x40\x7d\x28\x97\xb3\x42\x2a\x91\x55\xe5\xae\xe0\xfb\xc4\x53\xc8\xf6\xd1\x36\x11\x92\x72\x66\xc0\x23\x56\x2e\x95\x1d\x92\x70\xa1\x50\x3b\x9b\x41\x7f\xa7\x81\x44\x2e\x37\x20\xb7\xce\xcf\xbb\x1d\x17\x99\x82\x60\x45\x39\x43\x0d\xac\x88\x01\x35\x4d\x5f\x45\xba\x8e\x6a\x3a\xe8\x8b\x86\xa6\xfd\xaa\xad\x68\xda\x58\x8c\x1c\xf2\x98\xca\x07\xb5\x4b\x53\x6d\x0b\xb3\x20\xc5\x01\x41\x2e\xc1\xf1\x18\xa6\x6d\xb7\xad\x29\x9f\x5e\x2d\x94\x26\x67\x8a\x30\x85\xdc\xa3\x84\x18\xa0\xc8\x13\xb5\x90\x44\x98\xb2\x35\xf0\x42\x2c\x24\x51\xeb\x5b\xee\x06\x5a\xb9\xaf\x15\x98\xc9\x3e\x11\xc8\x62\x1e\xf7\x29\x0b\x0c\x58\xd9\xa3\x2a\xd7\xfc\x8f\x36\x09\x23\x02\x2b\x2e\x0c\xe8\x72\xe2\x53\x05\xb5\x6a\xad\xba\x34\xe6\x92\xe3\xf1\xa8\x50\x14\x37\x8b\x52\x81\x23\xb4\xc1\x45\x2c\x0d\x60\x49\xfe\x29\xd7\xf5\x35\x28\xca\x75\x6d\xed\xde\xad\x0c\x78\x1a\xee\x9a\xff\x65\xbd\x52\xc5\x00\x9c\x24\x0b\x5e\xec\x2f\x78\x9c\xf5\x69\x50\x0d\xb8\xb1\xa8\xcf\x6a\xd6\x26\xcb\x6b\x63\x86\x03\x92\xff\x07\xc5\x31\xf0\x3e\xec\x7b\x11\x9d\x6e\x75\x74\x7e\x36\x7a\xf3\x3c\x6f\xc2\x68\x70\x7c\x7b\xf2\x7a\x74\x75\x3e\x2b\x6e\x37\xa2\x52\x65\xf6\xfa\xea\x43\x27\x35\x6d\x12\xdc\xa2\x52\x01\x8e\x22\xf8\x87\xb0\x03\xca\xe4\x24\x9e\x2a\x12\xcb\x69\xf8\xf0\xe5\xdb\xe1\x8b\xef\x37\xa7\xcf\x6e\xde\x9f\x8e\x06\xc7\x77\xea\x82\xe2\xf6\xec\xdb\x7d\x10\xc1\x79\x9e\xb3\xf8\xfb\x24\x27\xc7\xa6\x12\x30\x28\xce\x23\x38\x0c\xa9\x17\x82\xc7\xd3\xc8\x87\x90\x44\x09\x1c\xf1\x14\x0e\xa9\x0a\xb3\x42\x40\x9c\x46\x8a\x26\x11\x99\xe4\x4c\x41\x72\x9f\x9b\x77\x5f\x87\x97\xe7\xc3\x57\x9f\xaf\xaf\x3e\x14\xcf\x32\xfc\x38\xb8\xbe\xfc\x72\x87\x35\x1a\x1c\x0f\x2f\x3e\x0d\x4f\x2e\x66\x63\x2d\x2f\x4f\xb0\x26\x03\x66\xcb\x86\xb9\xcc\x7b\x1e\xe2\x62\x15\x39\xc7\x4f\xf1\x33\xf4\x05\x40\x46\x32\x7d\x97\x72\xe9\x47\x00\x00\x00\xff\xff\x46\x5c\x2f\xfb\x55\x04\x00\x00")

func jcliZh_cnLc_messagesJcliPoBytes() ([]byte, error) {
	return bindataRead(
		_jcliZh_cnLc_messagesJcliPo,
		"jcli/zh_CN/LC_MESSAGES/jcli.po",
	)
}

func jcliZh_cnLc_messagesJcliPo() (*asset, error) {
	bytes, err := jcliZh_cnLc_messagesJcliPoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jcli/zh_CN/LC_MESSAGES/jcli.po", size: 1109, mode: os.FileMode(0644), modTime: time.Unix(1574312686, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0xc9, 0x1, 0xe8, 0x85, 0x7a, 0x67, 0x5d, 0xe, 0x9b, 0xe9, 0xc9, 0x25, 0x57, 0xf9, 0xe2, 0x8e, 0xc3, 0xce, 0xa3, 0xef, 0xa, 0x76, 0x58, 0xda, 0xa9, 0xcc, 0xc1, 0xec, 0x7e, 0xc5, 0xf3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"jcli/zh_CN/LC_MESSAGES/jcli.mo": jcliZh_cnLc_messagesJcliMo,
	"jcli/zh_CN/LC_MESSAGES/jcli.po": jcliZh_cnLc_messagesJcliPo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"jcli": &bintree{nil, map[string]*bintree{
		"zh_CN": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"jcli.mo": &bintree{jcliZh_cnLc_messagesJcliMo, map[string]*bintree{}},
				"jcli.po": &bintree{jcliZh_cnLc_messagesJcliPo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
