// Code generated by MockGen. DO NOT EDIT.
// Source: util/http.go

// Package mhttp is a generated GoMock package.
package mhttp

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDownloader is a mock of Downloader interface
type MockDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderMockRecorder
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader
type MockDownloaderMockRecorder struct {
	mock *MockDownloader
}

// NewMockDownloader creates a new mock instance
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
	mock := &MockDownloader{ctrl: ctrl}
	mock.recorder = &MockDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
	return m.recorder
}

// WriteFile mocks base method
func (m *MockDownloader) WriteFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile
func (mr *MockDownloaderMockRecorder) WriteFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockDownloader)(nil).WriteFile))
}

// DownloadFile mocks base method
func (m *MockDownloader) DownloadFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile
func (mr *MockDownloaderMockRecorder) DownloadFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockDownloader)(nil).DownloadFile))
}
