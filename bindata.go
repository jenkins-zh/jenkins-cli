// Code generated by go-bindata. DO NOT EDIT.
// sources:
// zh_CN.mo (444B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _zh_cnMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\x3f\x6f\x14\x31\x14\xc4\x27\x11\x34\x2e\xa9\x29\xde\x07\xc0\x47\x12\x51\x9c\x7c\x1c\x4d\x48\x50\x50\x02\x0b\x3a\x10\x1d\x32\xbb\x8f\x5b\x07\x9f\xbd\xb2\xbd\x84\x50\x21\xf1\xa7\xa0\x21\x0d\x12\x4a\x87\x44\x0a\x52\x24\x65\x56\xe2\xbb\x50\xed\x72\x3d\x9f\x00\x85\x25\xdc\x54\xbf\xd1\x7b\x23\x8d\xe6\xe7\x95\x4b\x9f\x01\x60\x19\xc0\x55\x00\xd7\x00\x5c\x06\x70\x13\xbd\x32\x00\xb7\x00\x3c\x00\xf0\x1b\xc0\x01\x80\x21\x80\xb7\x4b\xc0\x12\x16\x5a\xbe\x80\xdd\xdc\x1a\x32\x91\x34\x25\xef\x2d\xed\x95\x26\x2f\x29\xf7\xb5\x2d\xa8\x64\x5b\xd1\xbe\xaf\x69\xcf\xa4\xf2\x1c\x02\xcd\x6a\x9b\x4c\x65\x99\xee\xb2\x7b\x61\x5c\x44\x16\xfc\x2e\xe7\x49\x6e\x15\xf2\x31\x87\x68\xbc\x53\x24\xb2\xfb\xf2\x21\xbf\x34\xe7\x4e\xde\xd6\x89\x15\x89\x6d\xed\xa6\xb5\x9e\xb2\x9c\xb0\x9e\x29\x12\x3b\x5b\x3b\x1b\x8b\xc4\xea\x60\x45\xac\x7b\x97\xd8\x25\x39\xd9\xaf\x58\x51\xe2\x57\xe9\x7a\x65\xb5\x71\x23\xca\x4b\x1d\x22\xa7\xf1\xa3\xc9\xa6\x1c\x2e\xfe\x82\x76\xf1\x39\x07\xb9\xe1\x72\x5f\x18\x37\x55\x34\x7c\x66\x92\x78\x22\xef\xb0\xe3\xa0\x93\x0f\x8a\x32\xcf\x85\x49\xb4\x36\x58\x1b\xdc\x10\xdb\x3a\xfe\x8b\xd9\xfe\x2a\x32\x5b\x07\x6d\xe5\xa6\x0f\xb3\xa8\xc8\x55\x7f\x6d\x1c\xaf\x8e\xa8\xc7\xf1\xca\xe8\x7f\x73\x45\xaf\xcb\xa7\xeb\xf7\x44\xbf\xd8\xaf\x2f\xa7\x6d\xf3\xa6\x6d\x8e\xbb\x4f\xa7\xed\x8f\xa3\xae\x39\xe9\x3e\x7e\x9f\x9f\x7c\x9d\x1f\x7c\xe8\xbe\x1d\xb6\xcd\xf1\xc5\x42\x34\x3f\x7c\xd7\x9d\x1d\x75\xef\xcf\xf0\x27\x00\x00\xff\xff\x85\xa4\x8d\xb0\xbc\x01\x00\x00")

func zh_cnMoBytes() ([]byte, error) {
	return bindataRead(
		_zh_cnMo,
		"zh_CN.mo",
	)
}

func zh_cnMo() (*asset, error) {
	bytes, err := zh_cnMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "zh_CN.mo", size: 444, mode: os.FileMode(0644), modTime: time.Unix(1574227663, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3a, 0x66, 0x6, 0x92, 0x5, 0x1b, 0xcd, 0x92, 0x9d, 0xaa, 0xf5, 0x73, 0x99, 0xa7, 0xe7, 0x77, 0xfd, 0xff, 0x20, 0x34, 0x72, 0x5f, 0x9f, 0x4b, 0x73, 0xa4, 0xb, 0xfe, 0x8b, 0x42, 0xf6, 0x46}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"zh_CN.mo": zh_cnMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"zh_CN.mo": &bintree{zh_cnMo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
